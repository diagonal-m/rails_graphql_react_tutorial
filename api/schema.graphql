type Book {
  createdAt: ISO8601DateTime!
  dobuleName: String
  id: ID!
  title: String
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of CreateBook
"""
input CreateBookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  title: String
}

"""
Autogenerated return type of CreateBook
"""
type CreateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  result: Boolean
}

"""
Autogenerated input type of DeleteBook
"""
input DeleteBookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of DeleteBook
"""
type DeleteBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  result: Boolean
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createBook(
    """
    Parameters for CreateBook
    """
    input: CreateBookInput!
  ): CreateBookPayload
  deleteBook(
    """
    Parameters for DeleteBook
    """
    input: DeleteBookInput!
  ): DeleteBookPayload

  """
  An example field added by the generator
  """
  testField: String!
  updateBook(
    """
    Parameters for UpdateBook
    """
    input: UpdateBookInput!
  ): UpdateBookPayload
}

type Query {
  book(id: Int): Book!
  books: [Book!]!
}

"""
Autogenerated input type of UpdateBook
"""
input UpdateBookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  title: String
}

"""
Autogenerated return type of UpdateBook
"""
type UpdateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  result: Boolean
}
